[app]
# Lower cased application name
value = "frakt"
# Formatted application name to present in app
label = "FRAKT"
# Array of categories, max of 3
categories = ["lending"]
# Curation category flag
is_curated = false


[description]
# Short description used in search bars, mini app cards
short = "Buy, sell, earn yield and get instant liquidity out of your NFTs."
# Long description used in app details
long = """
# What is the FRAKT protocol?

> The FRAKT protocol (frakt.xyz) is a DeFi x NFT protocol that makes NFTs liquid, safe & accessible to everyone

It is a set of products designed to unlock liquidity from both expensive and floor NFTs so that this liquidity can then be used in DeFi. Users & communities can pool, fractionalize and borrow against their illiquid NFTs in order to
- Unlock liquidity instantly
- Generate sustainable yields
- Empower their communities

# Our products 

*Loans  - Borrow from the protocol using your NFTs or pool tokens as collateral*

Users can get $SOL liquidity using their NFTs or pool tokens as collateral. 50% of the fees generated from the borrowing product will be shared to the associated projects or DAO. Becoming a whitelisted borrowing collection on the Frakt protocol is therefore another great way to unlock an additional revenue source for your project or DAO 

*Lending - Deposit SOL into the lending liquidity pools to earn the interest paid by the borrowers*

*Pools - Buy, sell and swap NFTs instantly *

Users can add their NFTs into a collection specific NFT Pool to receive the associated fungible pool tokens in exchange for their contribution to the pool. Pool tokens can then be instantly swapped for $SOL or $USDC liquidity, or used to redeem specific/random NFTs from the pool. Users can therefore buy, sell and swap NFTs instantly. This product is targeted at floor price NFTs. As a project or DAO, creating a liquid NFT Pool for your collection will create market arbitrage opportunities bringing an overall higher volume for the collection therefore generating both pool fees and higher marketplace royalties. Pool & Marketplaces are therefore complementary

*Liquidity & Inventory Staking - Stake pool tokens to earn the fees generated by the pools*

Users and communities can stake their pool tokens to earn 80% of the fees generated by each interaction with the pool. For projects and DAOs owning floor NFTs, providing some of their inventory to the pool and becoming the initial liquidity provider is a great way to unlock an additional revenue source

*Vaults  - Fractionalize single or multiple NFTs (baskets) and trade them*

Users and communities can fractionalize single or multiple NFTs (NFT Baskets) into fungible fraktions. A vault is the entity that locks the NFT, issues the tokens linked to the fraktionalization and manages the buyout process. Fraktions can then be sold, distributed to communities or provided as liquidity to earn trading fees. This product is targeted at expensive/rare NFTs & collections

*Guard - Initial Liquidity Offering protocol for NFT collection aimed to prevents rugs*

New NFT collections to be minted and Launchpads can use our “Initial Liquidity Offering” (ILO) solution in order to ensure post mint liquidity, therefore preventing rugs and making teams more accountable. Part of the SOL raised during the mint is automatically added and locked as $TOKEN/$SOL pool liquidity. Minters can then instantly sell and reroll their newly minted NFTs
"""


[urls]
# URL used in app got logo
# webp3 format with size < 512x512px
logo = "https://raw.githubusercontent.com/SolWorks-Dev/resources/master/src/images/logos/frakt.png"
# URL to app home page
website = "https://frakt.xyz/"
# URL to app
application = "https://frakt.xyz/loans"
# Link to github
github = "https://github.com/frakt-solana"

# Additional app link
[[urls.other]]
# App link name
name = "Documentation"
# App link URL
url = "https://docs.frakt.xyz/frakt/"

[socials]
# array of associated twitter accounts, max 5 
# username or link only
twitter = ["FRAKT_HQ"]

# array of discord invites
# only include the text after `discord.gg/`
discord = ["fraktxgnomies"]

# array of medium accounts
# username or link only
medium = ["https://medium.com/@frakt_HQ"]

# array of telegram groups
# only include the text after `t.me/`
telegram = []
